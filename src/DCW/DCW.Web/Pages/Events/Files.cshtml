@page "{pageNumber=1}/{query?}"
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model FilesPageModel

@{
    ViewData["Title"] = "Files";
}

@section breadcrumb
{
    <ol class="breadcrumb">
        <li class="breadcrumb-item">
            <a asp-page="/User/Profile">Profile @User.Identity?.Name</a>
        </li>
        <li class="breadcrumb-item">
            <a asp-page="/User/Generate">Generate audit data</a>
        </li>
        <li aria-current="page"
            class="breadcrumb-item active">
            List of audit events - files
        </li>
    </ol>
}

<h3>Files</h3>

<div id="app">
    <div class="form-floating mb-3">
        <input type="search" class="form-control" id="tbQuery"
               tabindex="0"
               autofocus v-on:keyup.enter="callSearchAPI" v-model="query" placeholder="I want to search with this terms">
        <label for="tbQuery">Enter search term search the files</label>
    </div>
    <div class="row row-cols-1 row-cols-md-2 g-4" v-if="searchResults.length">
        <v-data-table :items="searchResults"
                      item-value="auditEventId"
                      :headers="headers">
            <template v-slot:item="{ item }">
                <tr>
                    <td>{{ item.message }}</td>
                    <td class="text-center">{{ item.timeStamp }}</td>
                    <td>{{ item.sourceIp }}</td>
                    <td class="text-center">{{ item.destinationIp }}</td>
                    <td class="text-center">{{ item.fileType }}</td>
                    <td class="text-center">{{ item.dileSizeBytes }}</td>
                </tr>
            </template>
            <td>
        </v-data-table>
    </div>
    <div class="text-info" v-else>
        <div v-if="isLoading">
            Loading data from the server...
        </div>
        <div v-else>
            No data has been retrieved.
        </div>
    </div>
</div>

@section Scripts
{
    @await Html.PartialAsync("_VueJs")
    @await Html.PartialAsync("_Vuetify")

    <script>
        const { createApp,ref } = Vue;
        const { createVuetify } = Vuetify;
        const vuetify = createVuetify();
        const query = ref('');   
        let isLoading = ref(false);
        let searchResults = ref([]);
        const headers= [
            { title: 'Message', key: 'message', align: 'start'},
            { title: 'Created At', key: 'timeStamp',align: 'center' },
            { title: 'From IP ', key: 'sourceIp' },
            { title: 'To ip',  key: 'destinationIp',align: 'center' },            
            { title: 'File type',  key: 'fileType',align: 'center' } ,           
            { title: 'File size bytes',  key: 'fileSizeBytes',align: 'center' }            
        ];
        createApp({
        setup() {        
          return {
            query,
            callSearchAPI,
            searchResults,
            isLoading,
            headers
          }
        }
      }).mount('#app')
      
      function callSearchAPI(e) {
        console.log('searching with ' + query);
        const value = e.target.value.trim()        
        if (value) {            
          isLoading.value = true;
          let searchUrl = '@Url.Page("Files", "Filter")' + "&query=" + value;
          console.log("Search url is " + searchUrl);  
          fetch(searchUrl)
            .then(response => response.json())
            .then(data => {
              console.log(data);
              searchResults.value = data;
            });
          isLoading.value = false;
        }
        else {
          searchResults.value = [];
        }
      }           
    </script>
}

@section Head
{
    @await Html.PartialAsync("_VuetifyStyles")
}